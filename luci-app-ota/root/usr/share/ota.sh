#!/bin/sh

# simple update firmware script for 132lan.ru site
# by Konstantine Shevlakov (c) 2025
# for correct OTA upgrade remote dir must have next iherarchy:
# www_root_dir/
#   latest/
#     changelog.txt - small note for update.
#     targets/
#       SoC_family/
#         SoC/
#           openwrt-${DISTRIB_RELEASE}-${PREFIX1}-${PREFIX2}-${YEAR}${MONTH}-rev${REVNUMBER}*.bin
#	    (e.g openwrt-24.10.2-4g-lte-202507-rev02-ramips-mt7621-beeline_smartbox-pro-squashfs-sysupgrade.bin)
#           profiles.json - list images generated by imagebuilder or buildroot
#
# In local firmware must be included local version in uci-defaults:
# /rom/etc/uci_defaults/fw_rev next body
#
#  FW_REV="${YEAR}${MONTH}-rev${REVNUMBER}"
#  e.g
#  FW_REV="202507-rev01"
#
# config URL Update server stored in
# /etc/config/ota
# config ota
# 	option url 'https://example.com/latest'
#
#
#       example
#
# config ota
# 	option url 'https://openwrt.132lan.ru/releases_cell/latest'

. /lib/functions.sh


load_config(){
        config_get url $1 url
}

config_load ota
config_foreach load_config

URL_BASE=$url

if [ "x${URL_BASE}" = "x" ]; then
	exit 0
fi


# Get OpenWrt Release info
[ -f /etc/openwrt_release ] && {
	. /etc/openwrt_release
	case ${DISTRIB_TARGET} in
		*x86*|*armsr*) echo "Current platform ${DISTRIB_TARGET} not supported." && exit 0 ;;
	esac
} || {
	echo "Unknown OpenWrt release!"
	exit 0
}

# Get board info
BOARD=$(jsonfilter -s "$(cat /etc/board.json)" -e '@["model"]["id"]')

# Remove update files
remove_files(){
	for f in firmware.bin changelog.txt; do
		[ -f /tmp/${f} ] && {
			rm -rf /tmp/${f}
		}
	done
}

case $1 in
	check)

		if [ ! -f /tmp/update.lock ]; then
			echo -e "Check updates from ${URL_BASE}\n"
		fi

		# Get aviable profiles
		! [ -f /tmp/profiles.json ] && {
			wget ${URL_BASE}/targets/${DISTRIB_TARGET}/profiles.json -O /tmp/profiles.json > /dev/null 2&>1
		}

		! [ -f /tmp/profiles.json ] && {
			echo "Updates not available from this server."
			exit 0
		}

		# Get changelog
		[ -f /tmp/profiles.json ] && {
			[ ! -f /tmp/changelog.txt ] && {
				wget ${URL_BASE}/changelog.txt -O /tmp/changelog.txt > /dev/null 2&>1
			} || {
				break
			}
		} || {
			echo "No updates for this board: $BOARD" && remove_files && exit 0
		}
	;;
esac

# Get available boards
BASE_BOARD=$(jsonfilter -s "$(cat /tmp/profiles.json)" -e '@["profiles"][*]["supported_devices"].*')

# Get available board info

board_stuff(){
        IMAGES=$(jsonfilter -s "$(cat /tmp/profiles.json)" -e "@['profiles']['$FW_BOARD']['images'][*]" | grep sysupgrade)
        echo $IMAGES | jsonfilter \
                -e FILE="$['name']" \
                -e SHA256="$['sha256']"
}

#sha256check(){
#}

# stuff
for b in $BASE_BOARD; do
	if [ "${b}" = "${BOARD}" ]; then
		# modify board name for profiles.json
		FW_BOARD=$(echo $BOARD | sed -e 's/\,/_/')
		[ -f /tmp/profiles.json ] && {
			eval $(board_stuff)
		} || {
			echo "Failed! Abort update"
			remove_files
		}
		# Get remote revision firmware
		FW_REV_EXT=$(echo $FILE | awk -F [-] '{gsub("rev",""); gsub(/\./,"",$2);  print $2$5$6}')
		# Get local revision firmware
		if [ -f /rom/etc/uci-defaults/fw_rev ]; then
			. /rom/etc/uci-defaults/fw_rev
			VER_LOCAL=$(echo $FW_REV | awk -F [-] '{gsub("rev",""); print $1$2}')
			DIGIT_RELEASE=$(echo ${DISTRIB_RELEASE} | awk '{gsub(/\./,""); print $0}')
			FW_VER_LOCAL=${DIGIT_RELEASE}${VER_LOCAL}
		else
			echo "Failed! Abort update"
			exit 0
		fi
		# Firmware upgrade
		case $1 in
			upgrade)
			if [ -f /tmp/update.lock ]; then
				echo "Download firmware $FILE"
				echo "from $URL_BASE"
				wget $URL_BASE/targets/${DISTRIB_TARGET}/$FILE -O /tmp/firmware.bin > /dev/null 2&>1
				case $? in
					0) echo "Download complete." ;;
					*) echo "No updates for this board: $BOARD" && remove_files && exit 0 ;;
				esac
				# Get local SHA256
				SHA256_DL=$(sha256sum /tmp/firmware.bin | awk '{print $1}')
				echo -n "Check sha256 sum: "
				# Compare remote and download file SHA256
				if [ "$SHA256" = "$SHA256_DL" ]; then
					echo "OK"
					echo "Update process start!"
					echo "Device will be rebooted."
					echo "DO NOT TURN OFF DEVICE!"
					# Test firmware image before flashing
					sysupgrade -T /tmp/firmware.bin
					case $? in
						0) echo "Flashing firmware" ;;
						*) echo "Failed! Abort update" && remove_files && exit 0 ;;
					esac
					rm -rf /tmp/update.lock /tmp/profiles.json /tmp/changelog.txt
					# Updrade firmware
					sleep 25 && sysupgrade /tmp/firmware.bin &
				else
					echo "Failed! Abort update."
					remove_files && rm -rf /tmp/update.lock /tmp/profiles.json
				fi
			fi
			;;
			check)
			# Compare firmware versions
			if [ $FW_REV_EXT -gt $FW_VER_LOCAL ]; then
				echo "New firmware upgrade release!"
				echo -e "*** $FILE ***\n"
				[ -r /tmp/changelog.txt ] && {
					echo -e "RELEASE NOTES:\n"
					echo "$(cat /tmp/changelog.txt)"
				}
				echo ""
				echo "Please run script again for download and install update!"
				touch /tmp/update.lock
			else
				echo "Update not found!"
			fi
			;;
		esac
	fi
done

#rm -f /tmp/profiles.json /tmp/update.lock /tmp/changelog.txt
