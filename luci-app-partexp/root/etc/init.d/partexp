#!/bin/sh /etc/rc.common

#
# Copyright (C) 2021-2022  sirpdboy  <herboy2008@gmail.com> https://github.com/sirpdboy/partexp

# This is free software, licensed under the Apache License, Version 2.0 .
#

START=99
USE_PROCD=1

EXTRA_COMMANDS="autopart"

LOCK=/var/lock/partexp.lock
LOGD=/etc/partexp
LOG=/etc/partexp/partexp.log

limit_log() {
	local logf=$1
	[ ! -f "$logf" ] && return
	local sc=100
	[ -n "$2" ] && sc=$2
	local count=$(grep -c "" $logf)
	if [[ $count -gt $sc ]];then
		let count=count-$sc
		sed -i "1,$count d" $logf
	fi
}

init_env() {
[ -d "$LOGD" ] || mkdir -p $LOGD
[ ! -f "$LOG" ] && echo " " > $LOG

}


gen_log()(
	log "---------------自动分区扩展挂载开始执行------------------ "
)

log(){
	echo -e  " $(date +'%Y-%m-%d %H:%M:%S') $*"
}


get_config() {
        config_get target_function $1 target_function 1
	config_get target_disk $1 target_disk 1
	config_get_bool keep_config $1 keep_config 1
	config_get_bool auto_format $1 auto_format 1
}

# 定义函数：检查硬盘是否已挂载
is_disk_mounted() {
    DISK=$1
    # 检查是否已挂载
    if mount | grep -q "^/dev/$DISK"; then
        return 0  # 已挂载
    else
        return 1  # 未挂载
    fi
}

# 定义函数：取消挂载硬盘
unmount_disk() {
    DISK=$1
    # log "正在取消挂载 /dev/$DISK..."
    MOUNT='';eval $(block info "/dev/$DISK" | grep -o -e "MOUNT=\S*") 
    if [ "$MOUNT" ] ; then
         umount /dev/$DISK 2>/dev/null
	 if [ $? -eq 0 ]; then
                  log "取消挂载成功: /dev/$DISK"
         else
                 log  "取消挂载失败: /dev/$DISK"
         fi
    fi  

}

# 定义函数：检查是否有共享挂载（如 Samba 或 NFS）
check_shared_mount() {
    DISK=$1
    if [ -f /etc/config/samba ]; then
        SHARED=$(grep -q "/dev/$DISK" /etc/config/samba)
        if [ $? -eq 0 ]; then
            log "检测到 Samba 共享挂载: /dev/$DISK"
            return 0
        fi
    fi
    # 检查是否有 NFS 共享
    if [ -f /etc/exports ]; then
        SHARED=$(grep -q "/dev/$DISK" /etc/exports)
        if [ $? -eq 0 ]; then
            log "检测到 NFS 共享挂载: /dev/$DISK"
            return 0
        fi
    fi
    return 1
}

usamba(){
s=$1
s2=$2
	[ -e "/etc/config/$s" ] && {
	msum=$(grep -c "config sambashare" /etc/config/$s)
	for i in $(seq 0 $((msum)))
	do
			pdev=`uci -q get $s.@sambashare[$i].path `
			[ "$pdev" = "$s2" ] && {
					uci delete $s.@sambashare[$i] 
					uci commit $s
					log "分区/dev/$b被挂载$MOUNT共享使用，删除$s共享成功！"  
					sleep 1
			}
	done
	}
    # 取消 Samba 共享
    if [ -f /etc/config/$s ]; then
        sed -i "/\/dev\/$b/d" /etc/config/$s
        /etc/init.d/$s restart
    fi
    # 取消 NFS 共享
    if [ -f /etc/exports ]; then
        sed -i "/\/dev\/$b/d" /etc/exports
        /etc/init.d/nfs restart
    fi
}


is_disk_partitioned() {
    PARTITION_COUNT=$(fdisk -l /dev/$1 2>/dev/null | grep -E "^/dev/$2" | wc -l)
    if [[ "$PARTITION_COUNT" -gt 0 ]]; then
        echo 1 
    else
        echo 0 
    fi
}

partednew(){
    DISK=$1
    parted -s /dev/$DISK mklabel gpt
    parted -s /dev/$DISK mkpart primary ext4 1MiB -1
}

fdisknew(){
    echo -e "n\np\n\n\n\nw" | fdisk /dev/$1   >/dev/null 2> /dev/null
}

fdisksave(){
    echo -e "n\w" | fdisk /dev/$1    >/dev/null 2> /dev/null
}

fdiskB(){
	a=$1
	b=$1$2
	log "检测$a是否分区$b..."
	isfdisk=0
	isP=$(is_disk_partitioned $a $b)
	if [ "$isP" == '0' ] ;then
 		fdisksave $a
 		fdisknew $a
		sleep 2
		isfdisk=1
	fi

	isP=$(is_disk_partitioned $a $b)
	if [ $isP == '1'  -a "$isfdisk" == 1 ] ;then
	   log "分区$b建立成功！"
	elif  [ $isP == '1'  -a "$isfdisk" = 0 ] ;then
	    log "检测目标分区$b已存在."
	else
	   log "分区$b建立失败，没有足够的空间操作失败！"
	   expquit 1
	fi
	sleep 1
	[ -e "/etc/config/dockerd" ] && /etc/init.d/dockerd stop  >/dev/null 2> /dev/null 
	
	block detect > /etc/config/fstab
	isD=` block info "/dev/$b" `
	if [ "$isD" ];then
	  MOUNT='';eval $(block info "/dev/$b" | grep -o -e "MOUNT=\S*")

	  log "检测/dev/$b是不是被共享..."
	  if [ "x$MOUNT" != 'x' ] ; then
		usamba samba4 $MOUNT
		usamba samba $MOUNT
		sleep 5
		umount $MOUNT || block umount /dev/$b
		sleep 5
		MOUNT='';eval $(block info "/dev/$b" | grep -o -e "MOUNT=\S*")
		if [ "x$MOUNT" != 'x'  ] ;then
		     log "分区/dev/$b挂载$MOUNT使用中,自动删除失败！请手动删除共享或者取消其它插件的占用权限再重试！" 
		     expquit 1 
		fi
	  else
	    log "检测目标设备$b未被共享..."
	  fi
	fi
	#isD=`block info /dev/$b | awk -F 'TYPE=' '{print $2}'| sed 's,\",,g' ` 
	TYPE='';eval $(block info "/dev/$b" | grep -o -e "TYPE=\S*")
	if [ "$target_function" = "/" -o "$target_function" = "/overlay" ] ; then 
	    log  "正在将/dev/$b格式化为EXT4文件系统..."
	    mkfs.ext4 -L extroot /dev/$b  >/dev/null 2> /dev/null 
	    log  "设备/dev/$b格式化EXT4成功！"
	elif [ "$auto_format" = "1" -o "$isfdisk" = "1" ] ; then
	    mkfs.ext4 -F /dev/$b  >/dev/null 2> /dev/null
	    log  "设备/dev/$b格式化EXT4成功！"
	elif [ "$TYPE" ];then
	    log  "设备/dev/$b无需格式化！"
	else
	    log  "设备/dev/$b未格式化，无法正常使用！"
	    expquit 1
	fi

	[ -d "/mnt/$b" ] || mkdir -p /mnt/$b
	MOUNT='';eval $(block info "/dev/$b" | grep -o -e "MOUNT=\S*") 
	if [  "x$MOUNT" != 'x'  ] ;then
	     umount /mnt/$b || block umount /dev/$b
	     MOUNT='';eval $(block info "/dev/$b" | grep -o -e "MOUNT=\S*") 
	     if [ "$MOUNT" ] ; then
	     	log "检测设备/dev/$b被占用,请检查设备硬件或中止其他插件等占用权限再重试！" 
		expquit 1
	     fi
	fi
	TYPE='';eval $(block info "/dev/$b" | grep -o -e "TYPE=\S*") 
	if [ "$TYPE" = "ntfs" ];then
	   log "检测设备/dev/$b分区是$TYPE格式！" 
	   if [ `which ntfs-3g ` ] ;then
	     mount -t ntfs-3g /dev/$b /mnt/$b   >/dev/null 2> /dev/null
	   elif  [ `which ntfs3 ` ]  ;then
	      mount -t ntfs3 /dev/$b /mnt/$b   >/dev/null 2> /dev/null
	   else
	     log "不支持NTFS分区挂载，请安装ntfs-3g或者ntfs3支持服务"
	     expquit 1
	   fi
	else
	   /usr/bin/mount /dev/$b  /mnt/$b  >/dev/null 2> /dev/null
	fi
	UUID='';eval $(block info /dev/$b | grep -o -e "UUID=\S*")
	if [ ! "$UUID" ] ; then 
	     log "获取/dev/$b设备UUID信息失败！"
	     expquit 1
	else
	     log "获取/dev/$b设备UUID信息:$UUID成功" 
	fi

	if [ "$target_function" = "/" ] ; then
			    mkdir -p /tmp/introot
			    mount --bind / /tmp/introot
			    tar -C /tmp/introot -cvf - . | tar -C /mnt/$b -xf -
			    umount /tmp/introot || block umount /tmp/introot
			    umount /mnt/$b || block umount /dev/$b
			    block detect > /etc/config/fstab
			    OVERLAY=`uci -q get fstab.@mount[0].target `
			    if [ "$OVERLAY" == "/overlay" -o "$OVERLAY" == "/dev/loop0" ] ;then
			         uci -q set fstab.@mount[0].uuid="${UUID}"
			         uci -q set fstab.@mount[0].target='/'
			         uci -q set fstab.@mount[0].enabled='1'
			    fi
			    log "保留数据根目录扩展/dev/$b成功！"

			    sleep 5
			    log "设备重启才能生效"
			    expquit 2

	elif [ "$target_function" = "/overlay" ] ; then
	 	if [ "$keep_config" = "1" ] ; then
		
			    # cp -a -f /overlay/*  /mnt/$b/  || cp -a -f /rom/overlay/*  /mnt/$b/
			    tar -C /overlay -cvf - . | tar -C /mnt/$b/ -xf -  || tar -C /rom/overlay -cvf - . | tar -C /mnt/$b/ -xf - 
			    umount /mnt/$b || block umount /dev/$b
			    block detect > /etc/config/fstab
			    OVERLAY=`uci -q get fstab.@mount[0].target `
			    if [ "$OVERLAY" == "/overlay" -o "$OVERLAY" == "/dev/loop0" ] ;then
			         uci -q set fstab.@mount[0].uuid="${UUID}"
			         uci -q set fstab.@mount[0].target='/overlay'
			         uci -q set fstab.@mount[0].enabled='0'
			    fi
			    msum=$(grep -c "'mount'" /etc/config/fstab)
			    for i in $(seq 0 $((msum-1)))
			    do
				zuuid=`uci -q get fstab.@mount[$i].uuid `
				[ $? -ne 0 ] && break
				if [ "$zuuid" = "$UUID" ] ; then
				    uci -q set fstab.@mount[$i].target="/overlay"
				    uci -q set fstab.@mount[$i].enabled='1'
			    	 fi
			    done
			    uci set fstab.@global[0].delay_root="15"
			    uci commit fstab
			    log "保留数据overlay扩展/dev/$b成功！"
			    sleep 5
			    log "设备重启才能生效"
			    expquit 2

		else
			    
			    umount /mnt/$b || block umount /dev/$b
			    block detect > /etc/config/fstab
			    OVERLAY=`uci -q get fstab.@mount[0].target `
			    if [ "$OVERLAY" == "/overlay" -o "$OVERLAY" == "/dev/loop0" ] ;then
			         uci -q set fstab.@mount[0].uuid="${UUID}"
			         uci -q set fstab.@mount[0].target='/overlay'
			         uci -q set fstab.@mount[0].enabled='0'
			    fi
			    msum=$(grep -c "'mount'" /etc/config/fstab)
			    for i in $(seq 0 $((msum-1)))
			    do
				zuuid=`uci -q get fstab.@mount[$i].uuid `
				[ $? -ne 0 ] && break
				if [ "$zuuid" = "$UUID" ] ; then
				    uci -q set fstab.@mount[$i].target="/overlay"
				    uci -q set fstab.@mount[$i].enabled='1'
			    	 fi
			    done
			    uci set fstab.@global[0].delay_root="15"
			    uci commit fstab
			    log "不保留数据overlay扩展/dev/$b成功！"
			    
			    sleep 3
			    log "设备重启才能生效"
			    expquit 2

		fi
	elif [ "$target_function" = "/lnoverlay" ] ; then
		umount /mnt/$b || block umount /dev/$b
		
		block detect > /etc/config/fstab
		mkdir -p $target_function
		msum=$(grep -c "'mount'" /etc/config/fstab)
		for i in $(seq 0 $((msum-1)))
		do
			zuuid=`uci -q get fstab.@mount[$i].uuid `
			[ $? -ne 0 ] && break
			if [ "$zuuid" = "$UUID" ] ; then
			    uci -q set fstab.@mount[$i].target="/mnt/$b"
			    uci -q set fstab.@mount[$i].enabled='1'
			 fi
		done
		uci commit fstab
		ln -sf /mnt/$b /overlay
		log "设备/dev/$b挂载/mnt/$b软链到/overlay扩容成功！" 
		log "设备重启才能生效"
		expquit 2
	else 
		umount /mnt/$b || block umount /dev/$b
		
		block detect > /etc/config/fstab
		mkdir -p $target_function
		msum=$(grep -c "'mount'" /etc/config/fstab)
		for i in $(seq 0 $((msum-1)))
		do
			zuuid=`uci -q get fstab.@mount[$i].uuid `
			[ $? -ne 0 ] && break
			if [ "$zuuid" = "$UUID" ] ; then
			  
			    [ "$target_function" = "/opt" ] && uci -q set fstab.@mount[$i].target="$target_function" || uci -q set fstab.@mount[$i].target="/mnt/$b"
			    
			    uci -q set fstab.@mount[$i].enabled='1'
			 fi
		done
		uci commit fstab
		[ "$target_function" = "/opt" ] && log "挂载/dev/$b到$target_function成功！" ||  log "挂载/dev/$b到/mnt/$b成功！" 
		log "设备重启才能生效"
		expquit 2

	fi
}

get_system_disk() {
    SYSTEM_DISK=$(mount | grep 'on /overlay' | awk '{print $1}' | sed 's/[0-9]*$//' |head -1)
    [ -z ${SYSTEM_DISK} ]  &&  SYSTEM_DISK=$( df -h | grep boot |awk -F ' ' '{print $1}' |head -1)
    echo "$SYSTEM_DISK"
}

get_all_disks() {
    DISKS=`fdisk -l 2>/dev/null | grep -E '^Disk /dev/' | awk -F ',' '{print $1}'`
    echo "$DISKS"
}

check_free_space() {
    DISK=$1 
    PARTED_OUTPUT=$(parted /dev/$DISK unit GB print free 2>/dev/null)
    FREE_SPACE=$(echo "$PARTED_OUTPUT" | grep "Free Space" | awk '{print $3}' )
    echo $FREE_SPACE |awk -F '.' '{print $1}'
}

# 定义函数：获取下一个新的可用的分区号
get_next_partition_number() {
    DISK=$1
    PARTITIONS=$(fdisk -l /dev/$DISK 2>/dev/null | grep -v boot  | grep -E "^/dev/$DISK" | awk '{print $1}' | sed 's/\/dev\/[a-z]*//g')
    MAX_PARTITION=$(echo "$PARTITIONS" | sort -n | tail -n 1)
    NEXT_PARTITION=$(awk -v n="$MAX_PARTITION" 'BEGIN { print n + 1 }')
    #NEXT_PARTITION=$((MAX_PARTITION + 1))
    echo "$NEXT_PARTITION"
}

# 定义函数：获取最后一个可用的分区号
get_last_partition_number() {
    DISK=$1
    PARTITIONS=$(fdisk -l /dev/$DISK 2>/dev/null | grep -v boot  | grep -E "^/dev/$DISK" | awk '{print $1}' | sed 's/\/dev\/[a-z]*//g')
    MAX_PARTITION=$(echo "$PARTITIONS" | sort -n | tail -n 1)
    echo "$MAX_PARTITION"
}


# 定义函数：获取硬盘分区数
get_partition_number() {
    DISK=$1
    PARTITIONS=$(fdisk -l /dev/$DISK 2>/dev/null | grep -v boot  | grep -E "^/dev/$DISK" | awk '{print $1}' | sed 's/\/dev\/[a-z]*//g' | wc -l)
    echo "$PARTITIONS"
}

autopart() {
    config_load partexp
    config_foreach get_config global
    init_env
    gen_log
    NEXTPART=1  #目标分区
    DISK=$target_disk   #目标硬盘
    DISKSALL=$(get_all_disks)  #硬盘名列表
    DISK_COUNT=$(echo "$DISKSALL" | wc -l)  #所有硬盘数量
    log "系统中检测到的硬盘数量: $DISK_COUNT"
    log "硬盘信息列表:" $DISKSALL
    SYSTEM_DISK=$(get_system_disk)
    log "系统盘: "$SYSTEM_DISK
    if [ "/dev/$DISK" == "$SYSTEM_DISK" ] ;then
        fdisksave /dev/$DISK
        log "此次执行操作功能：$target_function ，目标盘是系统盘：/dev/$DISK"
	PARTITIONSUM=$(get_partition_number $DISK)
	log "目标盘 $DISK 一共有分区数: $PARTITIONSUM个"
	if  [[ "$PARTITIONSUM" -gt 3 ]];then
	         FREE_SPACE=$(check_free_space $(basename $DISK))
	         log "目标盘 $DISK 有剩余空间: $FREE_SPACE Gb"
	         if [[ "$FREE_SPACE" -gt 2 ]]; then
		        NEXTPART=$(get_next_partition_number $DISK)
	         else
		        NEXTPART=$(get_last_partition_number  $DISK)
		 fi
	else 
		 FREE_SPACE=$(check_free_space $(basename $DISK))
	         log "目标盘 $DISK 有剩余空间: $FREE_SPACE Gb"
	         if [[ "$FREE_SPACE" -gt 2 ]]; then
		        NEXTPART=$(get_next_partition_number $DISK)
		 else

		        log "目标盘 $SYSTEM_DISK 没有足够的剩余空间！"
			expquit 1
		 fi
	fi
    else
        log "此次执行操作功能：$target_function ，目标盘是：/dev/$DISK"
	PARTITIONSUM=$(get_partition_number $DISK)
	log "目标盘 $DISK 一共有分区数: $PARTITIONSUM个"
	if  [[ "$PARTITIONSUM" -gt 1 ]];then
	         FREE_SPACE=$(check_free_space $(basename $DISK))
	         log "目标盘 $DISK 有剩余空间: $FREE_SPACE Gb"
		 
	         [[ $FREE_SPACE -gt 2 ]] && NEXTPART=$(get_next_partition_number $DISK) || NEXTPART=$(get_last_partition_number  $DISK)
	else 
		        NEXTPART=1
	fi
	            
    fi

    		log  "定位到操作目标设备分区:/dev/$DISK$NEXTPART"
		case "$DISK" in
		vd*|sd*) fdiskB $DISK $NEXTPART;;

		sd*) fdiskB $DISK $NEXTPART;;
		nvme*)  fdiskB $DISK p$NEXTPART;;
		mmc*)  fdiskB $DISK p$NEXTPART;;
		*)
			log "目标设备/dev/$target_disk暂不支持！请联系作者sirpdboy！"
			expquit 1
			;;
		esac
		
    rm -f $LOCK
}

start() {
[ x$x = x1 ] && exit || autopart

}

boot() {
x=1
}

expquit() {
	rm -f $LOCK
	[ -e "/etc/config/dockerd" ] && /etc/init.d/dockerd restart  >/dev/null 2> /dev/null 
	sleep 5
	[ $1 == 2 ] && log "重启中...\n" &&reboot 
	exit $1
}
